// Plik implementacji klasy IntBinaryTree.cpp
#include <iostream>
#include "IntBinaryTree.h"
using namespace std;

//**************************************************************
// Funkcja insert() wstawiająca w drzewie wskazywanym w argumencie
// nodePtr węzeł wskazywany w argumencie newNode.
// Funkcja jest wywoływana rekurencyjne.
//**************************************************************

void IntBinaryTree::insert(TreeNode *&nodePtr, TreeNode *&newNode)
{
  if (nodePtr == nullptr)
    nodePtr = newNode;              // Wstawienie węzła
  else if (newNode->value < nodePtr->value)
    insert(nodePtr->left, newNode); // Przeszukanie lewego poddrzewa
  else
    insert(nodePtr->right, newNode); // Przeszukanie prawego poddrzewa
}

//***********************************************************
// Funkcja insertNode() tworzy nowy węzeł, zapisuje w jego zmiennej value
// wartość argumentu num i umieszcza go w argumencie funkcji insert().
//***********************************************************

void IntBinaryTree::insertNode(int num)
{
  TreeNode *newNode = nullptr;   // Wskaźnik nowego węzła

  // Utworzenie nowego węzła i zapisanie w nim argumentu num
  newNode = new TreeNode;
  newNode->value = num;
  newNode->left = newNode->right = nullptr;

  // Wstawienie węzła
  insert(root, newNode);
}

//***************************************************
// Funkcja destroySubTree() wywoływana przez destruktor,
// usuwa wszystkie węzły drzewa.
//***************************************************

void IntBinaryTree::destroySubTree(TreeNode *nodePtr)
{
  if (nodePtr)
  {
    if (nodePtr->left)
      destroySubTree(nodePtr->left);
    if (nodePtr->right)
      destroySubTree(nodePtr->right);
    delete nodePtr;
  }
}

//*******************************************************
// Funkcja searchNode() zwraca wynik true, jeżeli
// szukana wartość jest zapisana w drzewie, lub false
// w przeciwnym razie.
//*******************************************************

bool IntBinaryTree::searchNode(int num)
{
  TreeNode *nodePtr = root;

  while (nodePtr)
  {
    if (nodePtr->value == num)
      return true;
    else if (num < nodePtr->value)
      nodePtr = nodePtr->left;
    else
      nodePtr = nodePtr->right;
  }
  return false;
}

//***********************************************
// Funkcja remove() wywołuje funkcję deleteNode() w celu usunięcia
// węzła zawierającego wartość podaną w argumencie num.
//***********************************************

void IntBinaryTree::remove(int num)
{
  deleteNode(num, root);
}


//********************************************
// Funkcja deleteNode() usuwa węzeł, którego zmienna value
// zawiera wartość podaną w argumencie num.
//********************************************

void IntBinaryTree::deleteNode(int num, TreeNode *&nodePtr)
{
  if (num < nodePtr->value)
    deleteNode(num, nodePtr->left);
  else if (num > nodePtr->value)
    deleteNode(num, nodePtr->right);
  else
    makeDeletion(nodePtr);
}


//***********************************************************
// Funkcja makeDeletion() usuwa węzeł, którego referencja
// jest podana w argumencie. Funkcja po usunięciu węzła
// podłącza z powrotem poddrzewa.
//***********************************************************

void IntBinaryTree::makeDeletion(TreeNode *&nodePtr)
{
  // Definicja tymczasowego wskaźnika wykorzystywanego
  // do przyłączenia lewego poddrzewa
  TreeNode *tempNodePtr = nullptr;

  if (nodePtr == nullptr)
    cout << "Nie można usunąć pustego węzła.\n";
  else if (nodePtr->right == nullptr)
  {
    tempNodePtr = nodePtr;
    nodePtr = nodePtr->left;  // Przyłączenie lewego poddrzewa
    delete tempNodePtr;
  }
  else if (nodePtr->left == nullptr)
  {
    tempNodePtr = nodePtr;
    nodePtr = nodePtr->right;  // Przyłączenie prawego poddrzewa
    delete tempNodePtr;
  }
  // Jeżeli węzeł ma dwa węzły pochodne
  else
  {
    // Przeniesienie jednego węzła do prawego poddrzewa
    tempNodePtr = nodePtr->right;
    // Przejście na koniec lewego poddrzewa
    while (tempNodePtr->left)
      tempNodePtr = tempNodePtr->left;
    // Przyłączenie lewego poddrzewa
    tempNodePtr->left = nodePtr->left;
    tempNodePtr = nodePtr;
    // Przyłączenie prawego poddrzewa
    nodePtr = nodePtr->right;
    delete tempNodePtr;
  }
}

//************************************************************
// Funkcja displayInOrder() wyświetla w przejściu poprzecznym
// wartości zawarte w drzewie wskazywanym przez nodePtr.
//************************************************************

void IntBinaryTree::displayInOrder(TreeNode *nodePtr) const
{
  if (nodePtr)
  {
    displayInOrder(nodePtr->left);
    cout << nodePtr->value << endl;
    displayInOrder(nodePtr->right);
  }
}

//*************************************************************
// Funkcja displayPreOrder() wyświetla w przejściu wzdłużnym
// wartości zawarte w drzewie wskazywanym przez nodePtr.
//*************************************************************

void IntBinaryTree::displayPreOrder(TreeNode *nodePtr) const
{
  if (nodePtr)
  {
    cout << nodePtr->value << endl;
    displayPreOrder(nodePtr->left);
    displayPreOrder(nodePtr->right);
  }
}

//*************************************************************
// Funkcja displayPostOrder() wyświetla w przejściu wstecznym
// wartości zawarte w drzewie wskazywanym przez nodePtr.
//*************************************************************

void IntBinaryTree::displayPostOrder(TreeNode *nodePtr) const
{
  if (nodePtr)
  {
    displayPostOrder(nodePtr->left);
    displayPostOrder(nodePtr->right);
    cout << nodePtr->value << endl;
  }
}
